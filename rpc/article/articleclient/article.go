// Code generated by taoctl. DO NOT EDIT!
// Source: article.proto

package articleclient

import (
	"context"

	"sllt/backend-learning/blog/rpc/article/article"

	"google.golang.org/grpc"
	"manlu.org/tao/zrpc"
)

type (
	CreateArticleReq  = article.CreateArticleReq
	CreateArticleResp = article.CreateArticleResp
	GetAllArticleReq  = article.GetAllArticleReq
	GetAllArticleResp = article.GetAllArticleResp
	GetArticleReq     = article.GetArticleReq
	GetArticleResp    = article.GetArticleResp
	Meta              = article.Meta
	Post              = article.Post
	Reply             = article.Reply

	Article interface {
		//  获取全部文章
		GetAllArticle(ctx context.Context, in *GetAllArticleReq, opts ...grpc.CallOption) (*GetAllArticleResp, error)
		//  获取文章详情
		GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*GetArticleResp, error)
		//  创建文章
		CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error)
	}

	defaultArticle struct {
		cli zrpc.Client
	}
)

func NewArticle(cli zrpc.Client) Article {
	return &defaultArticle{
		cli: cli,
	}
}

//  获取全部文章
func (m *defaultArticle) GetAllArticle(ctx context.Context, in *GetAllArticleReq, opts ...grpc.CallOption) (*GetAllArticleResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.GetAllArticle(ctx, in, opts...)
}

//  获取文章详情
func (m *defaultArticle) GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*GetArticleResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.GetArticle(ctx, in, opts...)
}

//  创建文章
func (m *defaultArticle) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.CreateArticle(ctx, in, opts...)
}
